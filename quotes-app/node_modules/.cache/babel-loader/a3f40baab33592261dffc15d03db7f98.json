{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketul\\\\Desktop\\\\React_Practice\\\\React\\\\quotes-app\\\\src\\\\pages\\\\QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect } from \"react\";\nimport { useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHTTP from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\"; // const DUMMY_QUOTES = [\n//   {\n//     id: \"q1\",\n//     author: \"Sonali\",\n//     text: \"Hello! Welcome to the world\",\n//   },\n//   {\n//     id: \"q2\",\n//     author: \"John\",\n//     text: \"Happy Earth Day\",\n//   },\n//   {\n//     id: \"q3\",\n//     author: \"Sachin\",\n//     text: \"Enjoy the Match\",\n//   },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteDetail = () => {\n  _s();\n\n  const params = useParams();\n  const {\n    quoteId\n  } = params;\n  const match = useRouteMatch();\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHTTP(getSingleQuote, true);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  } //   const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n\n\n  if (!quote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Quote to Display!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}`,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `{match.url}/comments`,\n          children: \"Load Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteDetail, \"6bsVu4CV/VmmpSIaZ/R8QgSySc0=\", false, function () {\n  return [useParams, useRouteMatch, useHTTP];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"sources":["C:/Users/ketul/Desktop/React_Practice/React/quotes-app/src/pages/QuoteDetail.js"],"names":["Fragment","useEffect","useParams","Link","useRouteMatch","Route","Comments","LoadingSpinner","HighlightedQuote","useHTTP","getSingleQuote","QuoteDetail","params","quoteId","match","sendRequest","status","data","loadedQuote","error","quote","text","author","path"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,YAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcD,MAApB;AACA,QAAME,KAAK,GAAGV,aAAa,EAA3B;AACA,QAAM;AAAEW,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,IAAI,EAAEC,WAA7B;AAA0CC,IAAAA;AAA1C,MAAoDV,OAAO,CAC/DC,cAD+D,EAE/D,IAF+D,CAAjE;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,WAAW,CAACF,OAAD,CAAX;AACD,GAFQ,EAEN,CAACE,WAAD,EAAcF,OAAd,CAFM,CAAT;;AAIA,MAAIG,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAnBuB,CAoBxB;;;AACA,MAAI,CAACI,KAAL,EAAY;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEA,KAAK,CAACC,IAA9B;AAAoC,MAAA,MAAM,EAAED,KAAK,CAACE;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAER,KAAK,CAACS,IAAK,EAA3B;AAA8B,MAAA,KAAK,MAAnC;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,EAAE,EAAG,sBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAET,KAAK,CAACS,IAAK,WAA3B;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAxCD;;GAAMZ,W;UACWT,S,EAEDE,a,EAC4CK,O;;;KAJtDE,W;AA0CN,eAAeA,WAAf","sourcesContent":["import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHTTP from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n// const DUMMY_QUOTES = [\r\n//   {\r\n//     id: \"q1\",\r\n//     author: \"Sonali\",\r\n//     text: \"Hello! Welcome to the world\",\r\n//   },\r\n//   {\r\n//     id: \"q2\",\r\n//     author: \"John\",\r\n//     text: \"Happy Earth Day\",\r\n//   },\r\n//   {\r\n//     id: \"q3\",\r\n//     author: \"Sachin\",\r\n//     text: \"Enjoy the Match\",\r\n//   },\r\n// ];\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n  const match = useRouteMatch();\r\n  const { sendRequest, status, data: loadedQuote, error } = useHTTP(\r\n    getSingleQuote,\r\n    true\r\n  );\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  //   const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n  if (!quote) {\r\n    return <p>No Quote to Display!</p>;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`{match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"]},"metadata":{},"sourceType":"module"}